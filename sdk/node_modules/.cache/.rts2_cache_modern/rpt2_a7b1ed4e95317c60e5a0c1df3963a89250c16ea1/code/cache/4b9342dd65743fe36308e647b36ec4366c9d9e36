{"code":"import axios from \"axios\";\r\nexport var ContentType;\r\n(function (ContentType) {\r\n    ContentType[\"JSON\"] = \"application/json\";\r\n    ContentType[\"FORM\"] = \"application/x-www-form-urlencoded\";\r\n    ContentType[\"MULTIPART_FORM_DATA\"] = \"multipart/form-data\";\r\n    ContentType[\"XML\"] = \"application/xml\";\r\n    ContentType[\"TEXT\"] = \"text/plain\";\r\n    ContentType[\"HTML\"] = \"text/html\";\r\n})(ContentType || (ContentType = {}));\r\nexport class Base {\r\n    baseUrl;\r\n    accessToken;\r\n    constructor(config) {\r\n        this.baseUrl = config.baseUrl;\r\n    }\r\n    async invoke(endpoint, options, contentType) {\r\n        const url = `${this.baseUrl}/${endpoint}`;\r\n        const headers = {\r\n            Accept: ContentType.JSON,\r\n            \"Content-Type\": contentType || ContentType.JSON,\r\n        };\r\n        const config = { url, headers, ...options };\r\n        return axios(config).then(response => response.data);\r\n    }\r\n}\r\n","references":["/Users/williamamouh/Documents/Projects/_cocrafter/sdk/node_modules/axios/index.d.ts"],"dts":{"name":"/Users/williamamouh/Documents/Projects/_cocrafter/sdk/dist/base.d.ts","writeByteOrderMark":false,"text":"import { AxiosRequestConfig } from \"axios\";\r\ntype Config = {\r\n    baseUrl?: string;\r\n    accessToken?: string;\r\n};\r\nexport declare enum ContentType {\r\n    JSON = \"application/json\",\r\n    FORM = \"application/x-www-form-urlencoded\",\r\n    MULTIPART_FORM_DATA = \"multipart/form-data\",\r\n    XML = \"application/xml\",\r\n    TEXT = \"text/plain\",\r\n    HTML = \"text/html\"\r\n}\r\nexport type ResponseTypeDto<T> = {\r\n    status: number;\r\n    message: string;\r\n    error?: any;\r\n    data?: T;\r\n};\r\nexport declare abstract class Base {\r\n    private readonly baseUrl?;\r\n    private readonly accessToken?;\r\n    constructor(config: Config);\r\n    protected invoke<T>(endpoint: string, options?: AxiosRequestConfig, contentType?: ContentType): Promise<ResponseTypeDto<T>>;\r\n}\r\nexport {};\r\n"}}
