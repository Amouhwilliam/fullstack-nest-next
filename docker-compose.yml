version: '3.8'

services:

  frontend:
    image: node:20.11.1
    container_name: frontend-container
    restart: always
    working_dir: /frontend
    environment:
      NEXT_PUBLIC_API_HOST: ${API_HOST}
      NEXT_PUBLIC_API_PORT: ${API_PORT}
    ports:
      - "3000:3000"
    links:
      - api
    depends_on:
      - api
    volumes:
      - ./frontend:/frontend
    command: bash -c "yarn && yarn dev"

  nginx: #to override in production
    image: nginx:latest
    container_name: production_nginx
    links:
      - frontend
    depends_on:
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
      - "443:443"

  api:
    image: node:20.11.1
    container_name: api-container
    restart: always
    working_dir: /app
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DATABASE: ${REDIS_DATABASE}
    ports:
      - ${API_PORT}:3000
    links:
      - postgres
      - redis
    depends_on:
      - postgres
      - redis
    volumes:
      - ./api:/app
    command: bash -c "yarn && yarn start:dev" # install node modules and start server

  postgres:
    container_name: postgres-container
    image: postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PWD}
      POSTGRES_DB: ${PG_DB}
    ports:
      - "5432:5432"

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    links:
      - postgres
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PWD}
      PG_HOST: postgres
      PG_PORT: 5432
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PWD}
      PG_DB_NAME: ${PG_DB}
      DB_CONNECTION: "pg"
    ports:
      - "8000:80"

  redis:
    container_name: redis-container
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - cache:/data

  redis_insight: # redis db visualization dashboard
    container_name: redis-insight-container
    image: redislabs/redisinsight
    restart: always
    links:
      - redis
    depends_on:
      - redis
    ports:
      - "8001:8001"
    volumes:
      - redis-insight:/db

volumes:
  postgres:
  cache:
  redis-insight: